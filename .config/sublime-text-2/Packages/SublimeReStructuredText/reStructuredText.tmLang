comment: syntax highlighting for reStructuredText http://docutils.sourceforge.net, based on rst mode from jEdit
name: Sublime reStructuredText

# set source.restrcturedtext instead of text.restructuredtext such that completions are shown
scopeName: text.restructuredtext

keyEquivalent: ^~R
fileTypes: <rst rest>
uuid: 62DA9AD6-36E1-4AB7-BB87-E933AD9FD1A4

# taken from docutils.utils.punctuation_chars
# openers       = \"\'\(\<\[\{༺༼᚛⁅⁽₍〈❨❪❬❮❰❲❴⟅⟦⟨⟪⟬⟮⦃⦅⦇⦉⦋⦍⦏⦑⦓⦕⦗⧘⧚⧼⸢⸤⸦⸨〈《「『【〔〖〘〚〝〝﴾︗︵︷︹︻︽︿﹁﹃﹇﹙﹛﹝（［｛｟｢«‘“‹⸂⸄⸉⸌⸜⸠‚„»’”›⸃⸅⸊⸍⸝⸡‛‟
# closers       = \"\'\)\>\]\}༻༽᚜⁆⁾₎〉❩❫❭❯❱❳❵⟆⟧⟩⟫⟭⟯⦄⦆⦈⦊⦌⦎⦐⦒⦔⦖⦘⧙⧛⧽⸣⸥⸧⸩〉》」』】〕〗〙〛〞〟﴿︘︶︸︺︼︾﹀﹂﹄﹈﹚﹜﹞）］｝｠｣»’”›⸃⸅⸊⸍⸝⸡‛‟«‘“‹⸂⸄⸉⸌⸜⸠‚„
# delimiters    = \-\/\:֊־᐀᠆‐‑‒–—―⸗⸚〜〰゠︱︲﹘﹣－¡·¿;·՚՛՜՝՞՟։׀׃׆׳״؉؊،؍؛؞؟٪٫٬٭۔܀܁܂܃܄܅܆܇܈܉܊܋܌܍߷߸߹࠰࠱࠲࠳࠴࠵࠶࠷࠸࠹࠺࠻࠼࠽࠾।॥॰෴๏๚๛༄༅༆༇༈༉༊་༌།༎༏༐༑༒྅࿐࿑࿒࿓࿔၊။၌၍၎၏჻፡።፣፤፥፦፧፨᙭᙮᛫᛬᛭᜵᜶។៕៖៘៙៚᠀᠁᠂᠃᠄᠅᠇᠈᠉᠊᥄᥅᧞᧟᨞᨟᪠᪡᪢᪣᪤᪥᪦᪨᪩᪪᪫᪬᪭᭚᭛᭜᭝᭞᭟᭠᰻᰼᰽᰾᰿᱾᱿᳓‖‗†‡•‣․‥…‧‰‱′″‴‵‶‷‸※‼‽‾⁁⁂⁃⁇⁈⁉⁊⁋⁌⁍⁎⁏⁐⁑⁓⁕⁖⁗⁘⁙⁚⁛⁜⁝⁞⳹⳺⳻⳼⳾⳿⸀⸁⸆⸇⸈⸋⸎⸏⸐⸑⸒⸓⸔⸕⸖⸘⸙⸛⸞⸟⸪⸫⸬⸭⸮⸰⸱、。〃〽・꓾꓿꘍꘎꘏꙳꙾꛲꛳꛴꛵꛶꛷꡴꡵꡶꡷꣎꣏꣸꣹꣺꤮꤯꥟꧁꧂꧃꧄꧅꧆꧇꧈꧉꧊꧋꧌꧍꧞꧟꩜꩝꩞꩟꫞꫟꯫︐︑︒︓︔︕︖︙︰﹅﹆﹉﹊﹋﹌﹐﹑﹒﹔﹕﹖﹗﹟﹠﹡﹨﹪﹫！＂＃％＆＇＊，．／：；？＠＼｡､･𐄀𐄁𐎟𐏐𐡗𐤟𐤿𐩐𐩑𐩒𐩓𐩔𐩕𐩖𐩗𐩘𐩿𐬹𐬺𐬻𐬼𐬽𐬾𐬿𑂻𑂼𑂾𑂿𑃀𑃁𒑰𒑱𒑲𒑳
openers            = "'\(\<\[\{
closers            = "'\)\>\]\}
delimiters         = \-\/\:=\+\*
closing_delimiters = \.\,\;\!\?

start_string_prefix = (?:^|(?<=\s|[{openers}{delimiters}]))
end_string_suffix   = (?:$|(?=\s|[\x{00000000}{closing_delimiters}{delimiters}{closers}]))

# taken from docutils.parsers.rst.states
uric          = [\-_.!~*'()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}]
urilast       = [_~*/=+a-zA-Z0-9]
uri_end_delim = [>]
uri_end       = (?:{urilast}|{uric}(?={uri_end_delim}))

emailc        = [\-_!~*'{|}/#?^`&=+$%a-zA-Z0-9\x{00000000}]
email_name    = {emailc}+(?:\.{emailc}+)*(?<!\x{00000000})
email_host    = {emailc}+(?:\.{emailc}*)*(?<!\x{00000000})
email         = {email_name}@{email_host}{uri_end}

uri_scheme    = [a-zA-Z][a-zA-Z0-9.+\-]*
uri_query     = (?:\?{uric}*{uri_end})
uri_fragment  = (?:#{uric}*{uri_end})
uri           = {uri_scheme}:(?://?)?{uric}*{uri_end}{uri_query}?{uri_fragment}?

hws = [\x{00000020}\t]
space = \x{00000020}

section_char = [=\-`:.'"~^_*+\#]

MAIN
	#block

inline
	constant.character.escape.restructuredtext
		\\.

	constant.constant.character.entity.restructuredtext
		--

	variable.other.substitution.restructuredtext 
		\|[^|\s]+\|

	meta.restructuredtext.link-explicit
		(`)([^`<]+)(`)(__?)\b
		1: keyword.operator.restructuredtext.group
		2: string.other.ref.restructuredtext
		3: keyword.operator.restructuredtext.group
		4: keyword.operator.restructuredtext.link-explicit

	meta.restructuredtext.link-explicit
		(`)([^`<]+)(<)([^>]+)(>)(`)(__?)\b
		1: keyword.operator.restructuredtext.group
		2: string.other.restructuredtext.caption
		3: keyword.operator.restructuredtext.link
		4: markup.underline.link.restructuredtext
		5: keyword.operator.restructuredtext.link
		6: keyword.operator.restructuredtext.link-explicit

	meta.restructuredtext.link-explicit
		([\w\-]+)(__?)\b
		1: string.other.restructuredtext.ref
		2: keyword.operator.restructuredtext.link-explicit

	meta.restructuredtext.link-footnote
		(\[)(\#[\w\-]*|\*|[\w\-]+)(\])(_)
		1: keyword.operator.group.restructuredtext
		2: string.other.ref.restructuredtext
		3: keyword.operator.group.restructuredtext
		4: keyword.operator.link.restructuredtext

	# inline hyperref target
	storage.class.ref.restructuredtext
		(_`)
		1: keyword.operator.ref.restructuredtext

		(`)|^\s*$
		1: keyword.operator.ref.restructuredtext

	string.other.link.implicit.restructuredtext
		({start_string_prefix}({uri}|{email}){end_string_suffix})
		1: markup.underline.link.restructuredtext.implicit

#	invalid.illegal.preformatted.restructuredtext
#		(``)
#		1: keyword.operator.code.restructuredtext
#
#		^\s*$

	<variable.parameter.restructuredtext.preformatted>
		(?<!`)(``)(.)
		1: keyword.operator.code.restructuredtext
		2: variable.parameter.restructuredtext.preformatted

		(``)(?!`)|^\s*$
		1: keyword.operator.code.restructuredtext

	meta.restructuredtext.role
		(:)([\w\-]+)(?:(:)([\w\-]+))?(:`)([^`]*)(`)
		1: keyword.operator.restructuredtext.role
		2: keyword.restructuredtext.role
		3: keyword.operator.restructuredtext.role
		4: keyword.restructuredtext.role
		5: keyword.operator.restructuredtext.role
		6: string.quoted.other.restructuredtext.role
		7: keyword.operator.restructuredtext.role

#	invalid.illegal.markup.bold.restructuredtext
#		(\*\*)
#		1: keyword.operator.bold.restructuredtext
#
#		^\s*$

	markup.bold.restructuredtext
		(\*\*)
		1: keyword.operator.bold.restructuredtext

		(\*\*)|^\s*$
		1: keyword.operator.bold.restructuredtext

#	invalid.illegal.markup.italic.restructuredtext
#		([*`])
#		1: keyword.operator.emph.restructuredtext
#
#		^\s*$

	markup.italic.restructuredtext
		([*`])
		1: keyword.operator.emph.restructuredtext

		(\1)|^\s*$
		1: keyword.operator.emph.restructuredtext

block
	#directive
	#parameter
	#table
	#option-list
	#line-block
	#blockquote
	#doctest-block
	#refdef
	#substdef
	#anonymous-ref
	#footnote
	#list-unnumbered
	#list-numbered
	#headline-or-term
	#headline-with-overline
	#comment
	#paragraph
	#preformatted
	#whitespace-line

line-block
	markup.list.restructuredtext.line-block
		^(?=({hws}*)\|{hws})
		^(?!\1(\|{hws}|\|$|{hws}))

		#line-block-content

line-block-content
	meta.block.restructuredtext.line-block-line
		^({hws}*)(\|)
		2: keyword.operator.restructuredtext.line-block

		^((?=\1\|)|(?!\1\s))

		#inline

doctest-block
	meta.block.doctest.block.restructuredtext

		^({hws}*)(>>>){space}(.*)
		2: keyword.operator.doctest.ps1.restructuredtext
		3: variable.other.doctest.ps1.restructuredtext

		^(?!\1(>>>|\.\.\.|\S))

		meta.line.doctest.ps1.restructuredtext
			^{hws}*(>>>){space}(.*)
			1: keyword.operator.doctest.ps1.restructuredtext
			2: variable.other.doctest.ps1.restructuredtext

		meta.line.doctest.ps1.restructuredtext
			^{hws}*(\.\.\.){space}(.*)
			1: keyword.operator.doctest.ps2.restructuredtext
			2: variable.other.doctest.ps2.restructuredtext

		meta.line.doctest.expected.restructuredtext
			^{hws}*(\S.*)
			1: string.other.doctest.expected.restructuredtext

blockquote
	meta.block.blockquote.author.restructuredtext
		^{hws}+(--)\s+(.*)
		1: keyword.operator.blockquote-author.restructuredtext
		2: string.other.blockquote-author.restructuredtext

table
	meta.block.table.restructuredtext
		^(?=({hws}*)(\+\-+)+\+\s*)
		^(?!\1(\+|\|))

		#table-content

	keyword.operator.table.row.restructuredtext
		^{hws}*(==+{space}+)+==+$

	keyword.operator.table.row.restructuredtext
		^{hws}*(--+{space}+)+--+$


table-content
	keyword.operator.table.row.restructuredtext
		^{hws}*(\+\-+)+\+

	keyword.operator.table.row.restructuredtext
		^{hws}*(\+=+)+\+

	meta.block.table.data.restructuredtext
		(\|(?={hws}))
		1: keyword.operator.table.data.restructuredtext

		(?<=\s)(?=\|)

		#inline

	keyword.operator.table.data.restructuredtext
		\|$

option-list
	meta.documentation.option-list.restructuredtext

		^({hws}*)((?:--?|/)\w(?:(?!{space}{space}).)*)(?={space}{space}+\S|$)
		2: string.other.option.restructuredtext

		^((?!\1{hws}+)|$)

		#inline

directive
	<string.other.restructuredtext.directive.parameter>
		^({hws}*)(\.\.)\s+([\w\-]+)(::)\s+
		2: keyword.operator.restructuredtext.directive
		3: keyword.restructuredtext.directive
		4: keyword.operator.restructuredtext.directive

		(?x) ^ (?: (?! \1{hws}) | (?= \1{hws}+: | \s* $) )

parameter
	meta.variable.parameter
		^({hws}*)(:)([^:]+)(:)\s+
		2: keyword.operator.restructuredtext.parameter
		3: variable.parameter.restructuredtext
		4: keyword.operator.restructuredtext.parameter

		^(?!(\1{hws}+|$))

refdef
	<string.other.restructuredtext.ref>
		^({hws}*)(\.\.\s+_)([^:]*)(:)\s+
		2: keyword.operator.restructuredtext.ref.start
		3: storage.class.restructuredtext.ref
		4: keyword.operator.restructuredtext.ref.end

		^(?!\1{hws}+\S)

footnote
	<string.other.restructuredtext.ref>
		^({hws}*)(\.\.\s\[)(\#[\w\-]*|\*|[\w\-]+)(\])
		2: keyword.operator.restructuredtext.ref.start
		3: storage.class.restructuredtext.ref
		4: keyword.operator.restructuredtext.ref.end

		^(?!\1{hws}+\S)

substdef
	<string.other.restructuredtext.subst>
		^({hws}*)(\.\.)\s(\|[\w\-]+\|)\s([^:]+)(::)
		2: keyword.operator.restructuredtext.directive
		3: variable.other.substitution.restructuredtext 
		4: keyword.restructuredtext.directive
		5: keyword.operator.restructuredtext.directive

		^(?!\1{hws}+\S)

anonymous-ref
	<string.other.restructuredtext.ref>
		^({hws}*)(__)\s
		2: keyword.operator.restructuredtext.ref.start

		^(?!\1{hws}+\S)

list-unnumbered
	markup.list.unnumbered.restructuredtext
		(?x) ^ ({hws}*) ([\*\-]) \s
		1: keyword.operator.restructuredtext.unnumbered-list

		(?x) ^ (?! \1 {hws}+ | $)

		#block

list-numbered
	markup.list.numbered.restructuredtext
		(?x) ^ ({hws}*) (\w[\.\)]|\#\.) \s
		1: keyword.operator.restructuredtext.numbered-list
		
		(?x) ^ (?! \1 {hws}+ | $)

		#block

paragraph

	# first a non-indented paragraph
	meta.paragraph.restructuredtext
		(?x) ^ (?=\S.*\w)
		(?x) ^ (?!\S) | ^ (?=[\W\s]*$) | (?=::$)

		#inline

	# indented paragraphs are more fuzzy
	meta.paragraph.restructuredtext
		(?x) ^ (?=({hws}+)\S)

		#inline

		(?x) (?=::$) | $


headline-or-term
	<markup.heading.headline.or-term.restructuredtext>
		(?x) ^ (?= (\S+{space})* \S+ $) (?= (?!\d[\.\)]) \w .{2,55} (?<!\.|::|\\|{space}) $)

		(?x) ^ (?={hws}+\S) | ^ ( ({section_char})\2{2,55} | \s* )$
		1: keyword.operator.heading.restructuredtext

		#inline

#	<markup.heading.headline.or-term.restructuredtext>
#		(?x) ^ (?= (\S+{space})* \S+ $) (?= [A-Z] .* (?<!\.|::|\\|{space}) $)


headline-with-overline
	<markup.heading.headline.restructuredtext>
		^((?!::$)({section_char})\2+)$
		1: keyword.operator.heading.restructuredtext

		^((\1)|\s*)$
		2: keyword.operator.heading.restructuredtext

		# #headline
		#inline

#		invalid.illegal.restructuredtext.multiline-headline
#			^(?!([=\-`:.'"~^_*+#])\1+$).*$

# line-too-long
#	invalid.illegal.restructuredtext.line-too-long
#		(?x) ^ \w .{75,}

#	markup.heading.headline.restructuredtext
#		(?x) ^\w[\w\-\s]{2,55}$ # short lines are considered headline

#	keyword.operator.restructuredtext.heading
#		^([=\-`:.'"~^_*+#])\1+$

preformatted
	meta.restructuredtext.preformatted
		(::)$
		1: keyword.operator.reStructuredText

		#preformatted-content

		(?x) ^ (?=.)

comment
	comment.block.dot.double
		^({hws}*)(\.\.)\s+
		^(?!\1{hws})

continuation
	punctuation.separator.continuation.restructuredtext
		\\$

# whitespace-line
# 	invalid.illegal.whitespace-line
# 		(?x) {hws}+ $
# 
# 	#inline

preformatted-content
	# here try to get the first indented line and make sure that all later lines are indented
	# the same or empty

	# markup.raw.restructuredtext.preformatted
	variable.parameter.restructuredtext.preformatted
		^({hws}+)(?=\S)

		^(?!\1|$)

	variable.parameter.preformatted.quoted.restructuredtext
		^(?=({hws}*)>)
		^(?!\1>)

		meta.preformatted.quoted.line.restructuredtext
			^{hws}*((?:>{space}?)+)
			1: keyword.operator.preformatted-line.restructuredtext


# headline
#	invalid.illegal.empty-line.restructuredtext
#		(?x) {hws}* $
#
#	meta.valid.headline.restructuredtext
#		(?x) ^(?={hws}*\w)
#
#		#inline
#
#		(?x) ^
#
#	invalid.illegal.non
#		(?x) {hws}* \w.* $
#
#		#inline
